/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { GLTF } from "three-stdlib";
import { useAnimations, useGLTF } from "@react-three/drei";
import { useEffect, useMemo } from "react";
import { SkeletonUtils } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Enemy_Eyes: THREE.SkinnedMesh;
    Enemy_Body_1: THREE.SkinnedMesh;
    Enemy_Body_2: THREE.SkinnedMesh;
    Enemy_Face_1: THREE.SkinnedMesh;
    Enemy_Face_2: THREE.SkinnedMesh;
    Enemy_Face_3: THREE.SkinnedMesh;
    Enemy_Face_4: THREE.SkinnedMesh;
    Body: THREE.Bone;
    Head: THREE.Bone;
  };
  materials: {
    Eyes: THREE.MeshStandardMaterial;
    Main: THREE.MeshStandardMaterial;
    Main_Dark: THREE.MeshStandardMaterial;
    Horns: THREE.MeshStandardMaterial;
    Teeth: THREE.MeshStandardMaterial;
    Tongue: THREE.MeshStandardMaterial;
  };
};

function useGltfMemo(url: string) {
  const gltf = useGLTF(url);
  const scene = useMemo(() => SkeletonUtils.clone(gltf.scene), [gltf.scene]);
  return { ...gltf, animations: [...gltf.animations], scene: scene };
}

type ActionName =
  | "MonsterArmature|Bite_Front"
  | "MonsterArmature|Bite_InPlace"
  | "MonsterArmature|Dance"
  | "MonsterArmature|Death"
  | "MonsterArmature|HitRecieve"
  | "MonsterArmature|Idle"
  | "MonsterArmature|Jump"
  | "MonsterArmature|No"
  | "MonsterArmature|Walk"
  | "MonsterArmature|Yes";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export function Enemy(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const { scene, nodes, materials } = useGltfMemo(
    "/scene_U98Taxg4LS.glb"
  ) as GLTFResult;
  SkeletonUtils.clone(scene);

  return (
    <group ref={group} {...props} dispose={null}>
      <primitive object={scene} />
    </group>
  );
}

useGLTF.preload("/scene_U98Taxg4LS.glb");
